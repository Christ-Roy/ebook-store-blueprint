name: Build React App pour Hostinger

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
      
      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Installation des dépendances
        run: npm ci
        
      - name: Build du projet
        run: npm run build
        env:
          CI: false
          VITE_BASE_URL: '/git-deploy/'
          
      - name: Créer les scripts PHP de compatibilité MIME
        run: |
          # Création du proxy PHP pour servir les fichiers JavaScript
          cat > build/js-proxy.php << 'EOL'
          <?php
          // Définir l'en-tête pour éviter les problèmes de cache
          header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
          header("Cache-Control: post-check=0, pre-check=0", false);
          header("Pragma: no-cache");

          // Obtenir le nom du fichier demandé depuis l'URL
          $requestedFile = isset($_GET['file']) ? $_GET['file'] : '';

          // Sécurité basique pour éviter les attaques de traversée de répertoire
          $requestedFile = str_replace('../', '', $requestedFile);

          // Chemin vers le fichier demandé
          $filePath = __DIR__ . '/' . $requestedFile;
          $txtFilePath = $filePath . '.txt';

          // Vérifier si le fichier existe (avec ou sans .txt)
          if (file_exists($filePath)) {
              // Détecter le type MIME en fonction de l'extension
              $extension = pathinfo($filePath, PATHINFO_EXTENSION);
              
              if ($extension == 'js' || $extension == 'mjs') {
                  header('Content-Type: application/javascript');
              } elseif ($extension == 'json') {
                  header('Content-Type: application/json');
              } elseif ($extension == 'css') {
                  header('Content-Type: text/css');
              }
              
              // Servir le fichier
              readfile($filePath);
              exit;
          } elseif (file_exists($txtFilePath)) {
              // Si le fichier .txt existe à la place
              header('Content-Type: application/javascript');
              readfile($txtFilePath);
              exit;
          }

          // Si le fichier n'existe pas
          header("HTTP/1.0 404 Not Found");
          echo "File not found: " . htmlspecialchars($requestedFile);
          EOL
          
          # Création du script de pré-traitement pour l'index.html
          cat > build/js-loader.php << 'EOL'
          <?php
          // Chemin vers l'index.html original
          $indexPath = __DIR__ . '/index.html';

          if (file_exists($indexPath)) {
              // Lire le contenu du fichier index.html
              $content = file_get_contents($indexPath);
              
              // Remplacer les imports de modules ES6 par des scripts standards via le proxy
              $content = preg_replace('/<script type="module" crossorigin src="([^"]+\.js)"><\/script>/i', 
                  '<script src="js-proxy.php?file=$1"></script>', $content);
              
              // Envoyer le contenu modifié
              echo $content;
          } else {
              echo "Index file not found!";
          }
          EOL
          
          # Création du fichier .htaccess optimisé
          cat > build/.htaccess << 'EOL'
          <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteBase /git-deploy/
            
            # Utiliser js-loader.php comme point d'entrée principal
            DirectoryIndex js-loader.php index.html
            
            # Rediriger les requêtes .js vers le proxy PHP
            RewriteRule ^(.+)\.js$ js-proxy.php?file=$1.js [L,QSA]
            
            # Gérer les routes SPA pour React
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_FILENAME} !-l
            RewriteRule . /git-deploy/js-loader.php [L]
          </IfModule>

          # Configuration des types MIME (solution de secours)
          <IfModule mod_mime.c>
            AddType application/javascript .js
            AddType application/javascript .js.txt
            AddType application/javascript .txt
            AddType text/css .css
          </IfModule>

          <IfModule mod_headers.c>
            <FilesMatch "\.(js|mjs|js\.txt|mjs\.txt|txt)$">
              Header set Content-Type "application/javascript"
            </FilesMatch>
          </IfModule>
          EOL
          
          # Création du document d'explication
          cat > build/SOLUTION-MIME.md << 'EOL'
          # Solution simplifiée aux problèmes de type MIME sur Hostinger

          Cette solution a été mise en place pour résoudre les problèmes spécifiques rencontrés avec le déploiement d'applications React/Vite sur Hostinger :

          1. Les fichiers JavaScript sont servis avec le type MIME `text/plain` au lieu de `application/javascript`
          2. Hostinger ajoute automatiquement l'extension `.txt` aux fichiers JavaScript (ex: `main.js` devient `main.js.txt`)

          ## Composants de la solution

          ### 1. js-proxy.php

          Ce proxy PHP intercepte les requêtes vers les fichiers JavaScript et les sert avec le bon type MIME. Il recherche également les fichiers avec l'extension `.txt` ajoutée par Hostinger.

          ```php
          // Usage: js-proxy.php?file=path/to/file.js
          ```

          ### 2. js-loader.php

          Ce script remplace l'index.html original et modifie dynamiquement les balises script pour utiliser le proxy PHP au lieu de charger directement les modules ES6.

          ### 3. Configuration .htaccess

          Le fichier `.htaccess` est configuré pour :
          - Utiliser `js-loader.php` comme point d'entrée principal
          - Rediriger les requêtes JavaScript vers le proxy PHP
          - Gérer le routage SPA pour React
          - Définir les types MIME corrects en secours

          ## Test de la solution

          Pour vérifier que la solution fonctionne correctement :

          1. Accédez à votre site à l'adresse `https://veridian.site/git-deploy/`
          2. Ouvrez les outils de développement du navigateur (F12)
          3. Vérifiez l'onglet "Network" et filtrez sur "JS"
          4. Confirmez que les fichiers JavaScript sont bien chargés via `js-proxy.php`
          5. Vérifiez que l'application fonctionne normalement sans erreur dans la console

          ## Déploiements futurs

          Cette solution est automatiquement intégrée dans le workflow GitHub Actions. À chaque déploiement, ces fichiers seront inclus dans le répertoire `git-deploy` pour maintenir la compatibilité avec Hostinger.

          Si vous rencontrez des problèmes, vérifiez que PHP est bien activé sur votre hébergement Hostinger et que les permissions des fichiers sont correctes (644 pour les fichiers, 755 pour les dossiers).
          EOL

      - name: Vérifier les permissions des fichiers
        run: |
          chmod -R 644 build/*
          find build -type d -exec chmod 755 {} \;

      - name: Configurer Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
      - name: Pousser le dossier build vers la branche build
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build  # Le dossier à déployer
          branch: build  # La branche cible
          clean: true  # Nettoie les fichiers existants
          target-folder: git-deploy  # Spécifie le sous-dossier pour le déploiement